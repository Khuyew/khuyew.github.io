// KHAI Chat Application
// Main application script with all features

class KHAIChat {
    constructor() {
        this.currentChat = null;
        this.chats = this.loadChats();
        this.currentModel = 'gpt-4';
        this.isRecording = false;
        this.mediaRecorder = null;
        this.audioChunks = [];
        this.speechSynthesis = window.speechSynthesis;
        this.currentUtterance = null;
        this.isSpeaking = false;
        this.attachedFiles = [];
        this.currentMode = 'normal'; // 'normal', 'image', 'voice'
        this.currentLanguage = 'ru';
        this.soundsEnabled = true;
        this.isCompactMode = false;
        
        this.initializeApp();
        this.setupEventListeners();
        this.loadCurrentChat();
        this.setupServiceWorker();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initializeApp() {
        console.log('üöÄ KHAI Chat Application Initializing...');
        this.applyTheme(this.getStoredTheme());
        this.updateUI();
        this.setupSoundEffects();
        this.showNotification('KHAI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Service Worker –¥–ª—è PWA
    async setupServiceWorker() {
        if ('serviceWorker' in navigator) {
            try {
                await navigator.serviceWorker.register('/sw.js');
                console.log('‚úÖ Service Worker registered');
            } catch (error) {
                console.log('‚ùå Service Worker registration failed:', error);
            }
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    setupSoundEffects() {
        this.sounds = {
            message: this.createSound(800, 0.1, 0.1),
            send: this.createSound(1200, 0.1, 0.05),
            error: this.createSound(400, 0.2, 0.3),
            click: this.createSound(600, 0.05, 0.02),
            notification: this.createSound(1000, 0.1, 0.1)
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    createSound(frequency, duration, volume) {
        return () => {
            if (!this.soundsEnabled) return;
            
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.value = frequency;
                oscillator.type = 'sine';
                
                gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
            } catch (error) {
                console.log('Audio error:', error);
            }
        };
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
    playSound(soundType) {
        if (this.sounds[soundType]) {
            this.sounds[soundType]();
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤
    toggleSounds() {
        this.soundsEnabled = !this.soundsEnabled;
        this.saveToStorage('soundsEnabled', this.soundsEnabled);
        this.updateSoundToggle();
        this.playSound('click');
        
        const message = this.soundsEnabled ? 'üîä –ó–≤—É–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã' : 'üîá –ó–≤—É–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã';
        this.showNotification(message, 'info');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∑–≤—É–∫–∞
    updateSoundToggle() {
        const soundToggle = document.getElementById('soundToggle');
        if (soundToggle) {
            soundToggle.innerHTML = this.soundsEnabled ? 
                '<i class="fas fa-volume-up"></i>' : 
                '<i class="fas fa-volume-mute"></i>';
            soundToggle.classList.toggle('active', this.soundsEnabled);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.userInput = document.getElementById('userInput');
        this.sendButton = document.getElementById('sendButton');
        this.messagesContainer = document.getElementById('messagesContainer');
        this.attachButton = document.getElementById('attachButton');
        this.fileInput = document.getElementById('fileInput');
        this.clearChatBtn = document.getElementById('clearChatBtn');
        this.themeToggle = document.getElementById('themeToggle');
        this.menuToggle = document.getElementById('menuToggle');
        this.sidebarClose = document.getElementById('sidebarClose');
        this.modelSelectBtn = document.getElementById('modelSelectBtn');
        this.modelModal = document.getElementById('modelModal');
        this.modelModalClose = document.getElementById('modelModalClose');
        this.voiceInputBtn = document.getElementById('voiceInputBtn');
        this.clearInputBtn = document.getElementById('clearInputBtn');
        this.searchInput = document.getElementById('searchInput');
        this.chatSearchInput = document.getElementById('chatSearchInput');

        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        this.imageModeBtn = document.getElementById('imageModeBtn');
        this.voiceModeBtn = document.getElementById('voiceModeBtn');
        this.normalModeBtn = document.getElementById('normalModeBtn');

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.scrollToBottomBtn = document.getElementById('scrollToBottomBtn');
        this.scrollToTopBtn = document.getElementById('scrollToTopBtn');

        // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–∞–π–¥–±–∞—Ä–∞
        this.newChatBtn = document.getElementById('newChatBtn');
        this.exportChatBtn = document.getElementById('exportChatBtn');
        this.soundToggle = document.getElementById('soundToggle');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
        this.userInput.addEventListener('input', this.handleInput.bind(this));
        this.userInput.addEventListener('keydown', this.handleKeyDown.bind(this));
        this.sendButton.addEventListener('click', this.sendMessage.bind(this));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
        this.attachButton.addEventListener('click', () => {
            this.playSound('click');
            this.fileInput.click();
        });
        this.fileInput.addEventListener('change', this.handleFileSelect.bind(this));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.themeToggle.addEventListener('click', this.toggleTheme.bind(this));
        this.menuToggle.addEventListener('click', this.toggleSidebar.bind(this));
        this.sidebarClose.addEventListener('click', this.toggleSidebar.bind(this));
        this.clearChatBtn.addEventListener('click', this.clearCurrentChat.bind(this));
        this.modelSelectBtn.addEventListener('click', this.showModelModal.bind(this));
        this.modelModalClose.addEventListener('click', this.hideModelModal.bind(this));
        this.modelModal.addEventListener('click', (e) => {
            if (e.target === this.modelModal) this.hideModelModal();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        this.imageModeBtn.addEventListener('click', () => this.setMode('image'));
        this.voiceModeBtn.addEventListener('click', () => this.setMode('voice'));
        this.normalModeBtn.addEventListener('click', () => this.setMode('normal'));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        this.voiceInputBtn.addEventListener('click', this.toggleVoiceInput.bind(this));
        this.clearInputBtn.addEventListener('click', this.clearUserInput.bind(this));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.scrollToBottomBtn.addEventListener('click', this.scrollToBottom.bind(this));
        this.scrollToTopBtn.addEventListener('click', this.scrollToTop.bind(this));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
        this.searchInput.addEventListener('input', this.handleSearch.bind(this));
        this.chatSearchInput.addEventListener('input', this.handleChatSearch.bind(this));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∞–π–¥–±–∞—Ä–∞
        this.newChatBtn.addEventListener('click', this.createNewChat.bind(this));
        this.exportChatBtn.addEventListener('click', this.exportCurrentChat.bind(this));
        this.soundToggle.addEventListener('click', this.toggleSounds.bind(this));

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('click', this.handleDocumentClick.bind(this));
        window.addEventListener('scroll', this.handleScroll.bind(this));
        window.addEventListener('resize', this.handleResize.bind(this));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–æ–¥–µ–ª–µ–π
        this.setupModelSelection();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        this.setupLanguageSelection();

        console.log('‚úÖ Event listeners setup complete');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    handleInput() {
        this.updateInputControls();
        this.updateInputProgress();
        this.playSound('click');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–æ–¥–æ–º
    updateInputControls() {
        const hasText = this.userInput.value.trim().length > 0;
        this.clearInputBtn.classList.toggle('visible', hasText);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–≤–æ–¥–∞
        this.updateInputProgress();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤–≤–æ–¥–∞
    updateInputProgress() {
        const text = this.userInput.value;
        const maxChars = 4000;
        const progress = (text.length / maxChars) * 100;
        const progressBar = document.querySelector('.input-progress-bar');
        
        if (progressBar) {
            progressBar.style.width = `${Math.min(progress, 100)}%`;
            progressBar.style.background = progress >= 90 ? 
                'linear-gradient(135deg, #ff6b6b, #ee5a52)' : 
                'var(--accent-gradient)';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateInputStats();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–æ–¥–∞
    updateInputStats() {
        const text = this.userInput.value;
        const statsContainer = document.querySelector('.input-stats');
        
        if (statsContainer) {
            const charCount = text.length;
            const fileCount = this.attachedFiles.length;
            const wordCount = text.trim() ? text.trim().split(/\s+/).length : 0;
            
            statsContainer.innerHTML = `
                <div class="input-stat">
                    <i class="fas fa-font"></i>
                    <span>${charCount}/4000</span>
                </div>
                <div class="input-stat">
                    <i class="fas fa-file"></i>
                    <span>${fileCount}</span>
                </div>
                <div class="input-stat">
                    <i class="fas fa-keyboard"></i>
                    <span>${wordCount}</span>
                </div>
            `;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
    handleKeyDown(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            this.sendMessage();
        }
        
        if (e.key === 'Escape') {
            this.clearUserInput();
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    async sendMessage() {
        const message = this.userInput.value.trim();
        
        if (!message && this.attachedFiles.length === 0) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª', 'warning');
            this.playSound('error');
            return;
        }

        this.playSound('send');

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userMessage = {
            id: Date.now(),
            type: 'user',
            content: message,
            files: [...this.attachedFiles],
            timestamp: new Date().toISOString(),
            model: this.currentModel
        };

        this.addMessageToChat(userMessage);
        this.renderMessage(userMessage);
        this.clearUserInput();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        this.showTypingIndicator();

        try {
            let response;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            switch (this.currentMode) {
                case 'image':
                    response = await this.generateImageResponse(message);
                    break;
                case 'voice':
                    response = await this.generateVoiceResponse(message);
                    break;
                default:
                    response = await this.generateTextResponse(message);
            }

            this.hideTypingIndicator();
            
            const aiMessage = {
                id: Date.now() + 1,
                type: 'ai',
                content: response,
                timestamp: new Date().toISOString(),
                model: this.currentModel
            };

            this.addMessageToChat(aiMessage);
            this.renderMessage(aiMessage);
            this.playSound('message');

            // –ê–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if (this.currentMode === 'voice') {
                this.speakText(response);
            }

        } catch (error) {
            this.hideTypingIndicator();
            console.error('Error:', error);
            
            const errorMessage = {
                id: Date.now() + 1,
                type: 'error',
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                timestamp: new Date().toISOString()
            };

            this.addMessageToChat(errorMessage);
            this.renderMessage(errorMessage);
            this.playSound('error');
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    async generateTextResponse(message) {
        // –≠–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç fetch –∫ API
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
        
        const responses = {
            ru: [
                "–ü—Ä–∏–≤–µ—Ç! –Ø KHAI - –ø–µ—Ä–≤—ã–π –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –ò–ò. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ...",
                "–ù–∞ –æ—Å–Ω–æ–≤–µ –º–æ–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ...",
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ...",
                "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç..."
            ],
            en: [
                "Hello! I'm KHAI - the first Belarusian AI. How can I help you?",
                "Interesting question! Let's break it down...",
                "Based on my analysis, I can suggest the following...",
                "Great question! Here's what I can say about this topic...",
                "I understand your request. Here's my response..."
            ]
        };

        const langResponses = responses[this.currentLanguage] || responses.ru;
        return langResponses[Math.floor(Math.random() * langResponses.length)];
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    async generateImageResponse(message) {
        await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));
        return `üé® –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "${message}" —è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    async generateVoiceResponse(message) {
        await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 2000));
        return `üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å "${message}". –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`;
    }

    // –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞
    speakText(text) {
        if (!this.speechSynthesis || this.isSpeaking) return;

        this.isSpeaking = true;
        this.currentUtterance = new SpeechSynthesisUtterance(text);
        this.currentUtterance.lang = this.currentLanguage === 'ru' ? 'ru-RU' : 'en-US';
        this.currentUtterance.rate = 0.9;
        this.currentUtterance.pitch = 1;

        this.currentUtterance.onend = () => {
            this.isSpeaking = false;
            this.updateSpeakButtons();
        };

        this.currentUtterance.onerror = () => {
            this.isSpeaking = false;
            this.updateSpeakButtons();
        };

        this.speechSynthesis.speak(this.currentUtterance);
        this.updateSpeakButtons();
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∑–≤—É—á–∫–∏
    stopSpeaking() {
        if (this.speechSynthesis && this.isSpeaking) {
            this.speechSynthesis.cancel();
            this.isSpeaking = false;
            this.updateSpeakButtons();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ–∑–≤—É—á–∫–∏
    updateSpeakButtons() {
        document.querySelectorAll('.speak-btn').forEach(btn => {
            btn.classList.toggle('speaking', this.isSpeaking);
            btn.innerHTML = this.isSpeaking ? 
                '<i class="fas fa-stop"></i>' : 
                '<i class="fas fa-volume-up"></i>';
        });
    }

    // –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
    toggleVoiceInput() {
        this.playSound('click');
        
        if (!this.isRecording) {
            this.startVoiceInput();
        } else {
            this.stopVoiceInput();
        }
    }

    // –ù–∞—á–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    async startVoiceInput() {
        if (!navigator.mediaDevices || !window.MediaRecorder) {
            this.showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ', 'error');
            return;
        }

        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            this.mediaRecorder = new MediaRecorder(stream);
            this.audioChunks = [];

            this.mediaRecorder.ondataavailable = (event) => {
                this.audioChunks.push(event.data);
            };

            this.mediaRecorder.onstop = () => {
                this.processAudio();
            };

            this.mediaRecorder.start();
            this.isRecording = true;
            this.voiceInputBtn.classList.add('recording');
            this.showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω...', 'info');

        } catch (error) {
            console.error('Error accessing microphone:', error);
            this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É', 'error');
            this.playSound('error');
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    stopVoiceInput() {
        if (this.mediaRecorder && this.isRecording) {
            this.mediaRecorder.stop();
            this.mediaRecorder.stream.getTracks().forEach(track => track.stop());
            this.isRecording = false;
            this.voiceInputBtn.classList.remove('recording');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    processAudio() {
        // –≠–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const mockText = "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞";
        this.userInput.value = mockText;
        this.updateInputControls();
        this.showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ', 'success');
        this.playSound('notification');
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clearUserInput() {
        this.userInput.value = '';
        this.attachedFiles = [];
        this.updateInputControls();
        this.renderAttachedFiles();
        this.playSound('click');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    handleFileSelect(event) {
        const files = Array.from(event.target.files);
        
        files.forEach(file => {
            if (this.attachedFiles.length >= 5) {
                this.showNotification('–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–∞–π–ª–æ–≤', 'warning');
                return;
            }

            if (file.size > 10 * 1024 * 1024) { // 10MB limit
                this.showNotification(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π`, 'error');
                return;
            }

            this.attachedFiles.push({
                name: file.name,
                type: file.type,
                size: file.size,
                url: URL.createObjectURL(file)
            });
        });

        this.renderAttachedFiles();
        this.updateInputStats();
        this.playSound('click');
        event.target.value = '';
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    renderAttachedFiles() {
        const container = document.querySelector('.attached-files');
        if (!container) return;

        container.innerHTML = this.attachedFiles.map(file => `
            <div class="attached-file">
                <i class="fas ${this.getFileIcon(file.type)}"></i>
                <span>${file.name}</span>
                <button class="remove-file" onclick="app.removeAttachedFile('${file.name}')">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `).join('');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    getFileIcon(fileType) {
        if (fileType.startsWith('image/')) return 'fa-image';
        if (fileType.startsWith('video/')) return 'fa-video';
        if (fileType.startsWith('audio/')) return 'fa-music';
        if (fileType.includes('pdf')) return 'fa-file-pdf';
        if (fileType.includes('word') || fileType.includes('document')) return 'fa-file-word';
        return 'fa-file';
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    removeAttachedFile(fileName) {
        this.attachedFiles = this.attachedFiles.filter(file => file.name !== fileName);
        this.renderAttachedFiles();
        this.updateInputStats();
        this.playSound('click');
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    setMode(mode) {
        this.currentMode = mode;
        this.updateModeUI();
        this.playSound('click');
        
        const modeNames = {
            normal: '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º',
            image: '–†–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            voice: '–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º'
        };
        
        this.showNotification(`${modeNames[mode]} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`, 'info');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–∂–∏–º–∞
    updateModeUI() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤
        [this.imageModeBtn, this.voiceModeBtn, this.normalModeBtn].forEach(btn => {
            btn.classList.remove('active', 'image-mode', 'voice-mode', 'normal-mode');
        });

        const activeBtn = {
            image: this.imageModeBtn,
            voice: this.voiceModeBtn,
            normal: this.normalModeBtn
        }[this.currentMode];

        if (activeBtn) {
            activeBtn.classList.add('active', `${this.currentMode}-mode`);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        this.updateModeIndicator();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    updateModeIndicator() {
        const indicator = document.querySelector('.mode-indicator');
        if (!indicator) return;

        const modeConfig = {
            normal: { text: 'üìù –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º', class: 'normal-mode' },
            image: { text: 'üé® –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', class: 'image-mode' },
            voice: { text: 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º', class: 'voice-mode' }
        };

        const config = modeConfig[this.currentMode];
        indicator.className = `mode-indicator ${config.class}`;
        indicator.innerHTML = `
            <i class="fas ${this.getModeIcon()}"></i>
            <span>${config.text}</span>
        `;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞
    getModeIcon() {
        return {
            normal: 'fa-keyboard',
            image: 'fa-image',
            voice: 'fa-microphone'
        }[this.currentMode];
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    setupModelSelection() {
        const modelItems = document.querySelectorAll('.model-item');
        modelItems.forEach(item => {
            item.addEventListener('click', () => {
                const model = item.dataset.model;
                this.selectModel(model);
                this.hideModelModal();
            });
        });
    }

    // –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    selectModel(model) {
        this.currentModel = model;
        this.updateModelButton();
        this.saveToStorage('currentModel', model);
        this.playSound('click');
        
        this.showNotification(`–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${model}`, 'success');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    updateModelButton() {
        const modelNames = {
            'gpt-4': 'GPT-4',
            'gpt-3.5': 'GPT-3.5 Turbo',
            'claude-2': 'Claude 2',
            'bard': 'Google Bard'
        };

        this.modelSelectBtn.innerHTML = `
            <i class="fas fa-robot"></i>
            <span>${modelNames[this.currentModel] || this.currentModel}</span>
            <i class="fas fa-chevron-down"></i>
        `;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    showModelModal() {
        this.modelModal.classList.add('active');
        this.playSound('click');
    }

    // –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    hideModelModal() {
        this.modelModal.classList.remove('active');
        this.playSound('click');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    setupLanguageSelection() {
        const langButtons = document.querySelectorAll('.lang-btn');
        langButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const lang = btn.dataset.lang;
                this.setLanguage(lang);
            });
        });
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
    setLanguage(lang) {
        this.currentLanguage = lang;
        this.updateLanguageUI();
        this.saveToStorage('currentLanguage', lang);
        this.playSound('click');
        
        const langNames = { ru: '–†—É—Å—Å–∫–∏–π', en: 'English' };
        this.showNotification(`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${langNames[lang]}`, 'success');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —è–∑—ã–∫–∞
    updateLanguageUI() {
        document.querySelectorAll('.lang-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.lang === this.currentLanguage);
        });
    }

    // –†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–∞–º–∏
    loadChats() {
        try {
            const chats = localStorage.getItem('khai_chats');
            return chats ? JSON.parse(chats) : [this.createNewChatData()];
        } catch (error) {
            console.error('Error loading chats:', error);
            return [this.createNewChatData()];
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    createNewChatData() {
        return {
            id: Date.now(),
            title: '–ù–æ–≤—ã–π —á–∞—Ç',
            messages: [],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    loadCurrentChat() {
        const savedChatId = localStorage.getItem('currentChatId');
        this.currentChat = this.chats.find(chat => chat.id == savedChatId) || this.chats[0];
        this.renderChat();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    createNewChat() {
        const newChat = this.createNewChatData();
        this.chats.unshift(newChat);
        this.currentChat = newChat;
        this.saveChats();
        this.renderChat();
        this.renderChatList();
        this.playSound('click');
        this.showNotification('–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω', 'success');
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    clearCurrentChat() {
        if (this.currentChat.messages.length === 0) {
            this.showNotification('–ß–∞—Ç —É–∂–µ –ø—É—Å—Ç', 'info');
            return;
        }

        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç?')) {
            this.currentChat.messages = [];
            this.saveChats();
            this.renderChat();
            this.playSound('click');
            this.showNotification('–ß–∞—Ç –æ—á–∏—â–µ–Ω', 'success');
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    exportCurrentChat() {
        const chatData = {
            ...this.currentChat,
            exportedAt: new Date().toISOString()
        };

        const blob = new Blob([JSON.stringify(chatData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `khai-chat-${this.currentChat.id}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        this.playSound('click');
        this.showNotification('–ß–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    addMessageToChat(message) {
        this.currentChat.messages.push(message);
        this.currentChat.updatedAt = new Date().toISOString();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (this.currentChat.messages.length === 1 && message.type === 'user') {
            this.currentChat.title = message.content.substring(0, 50) + (message.content.length > 50 ? '...' : '');
        }
        
        this.saveChats();
        this.renderChatList();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞
    renderChat() {
        this.messagesContainer.innerHTML = '';
        this.currentChat.messages.forEach(message => this.renderMessage(message));
        this.scrollToBottom();
        this.updateChatInfo();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    renderMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.className = `message message-${message.type}`;
        messageElement.dataset.messageId = message.id;

        let content = this.formatMessageContent(message.content);
        
        if (message.files && message.files.length > 0) {
            content += this.renderMessageFiles(message.files);
        }

        messageElement.innerHTML = `
            <div class="message-content">${content}</div>
            ${this.renderMessageActions(message)}
            ${message.model ? `<div class="model-indicator">–ú–æ–¥–µ–ª—å: ${message.model}</div>` : ''}
        `;

        this.messagesContainer.appendChild(messageElement);
        this.scrollToBottom();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        this.setupMessageActionHandlers(messageElement, message);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    formatMessageContent(content) {
        // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
        return content
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>');
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
    renderMessageFiles(files) {
        return files.map(file => `
            <div class="message-image">
                <img src="${file.url}" alt="${file.name}" loading="lazy">
            </div>
        `).join('');
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    renderMessageActions(message) {
        if (message.type === 'error') return '';

        return `
            <div class="message-actions">
                <button class="action-btn-small copy-btn" onclick="app.copyMessage(${message.id})">
                    <i class="fas fa-copy"></i> –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </button>
                ${message.type === 'ai' ? `
                    <button class="action-btn-small speak-btn" onclick="app.toggleMessageSpeech(${message.id})">
                        <i class="fas fa-volume-up"></i> –û–∑–≤—É—á–∏—Ç—å
                    </button>
                ` : ''}
                <button class="action-btn-small" onclick="app.regenerateMessage(${message.id})">
                    <i class="fas fa-redo"></i> –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
        `;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è
    setupMessageActionHandlers(messageElement, message) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ onclick –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    copyMessage(messageId) {
        const message = this.currentChat.messages.find(m => m.id === messageId);
        if (message) {
            navigator.clipboard.writeText(message.content).then(() => {
                this.showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', 'success');
                this.playSound('click');
            });
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    toggleMessageSpeech(messageId) {
        const message = this.currentChat.messages.find(m => m.id === messageId);
        if (message) {
            if (this.isSpeaking) {
                this.stopSpeaking();
            } else {
                this.speakText(message.content);
            }
        }
    }

    // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    regenerateMessage(messageId) {
        const messageIndex = this.currentChat.messages.findIndex(m => m.id === messageId);
        if (messageIndex !== -1) {
            const userMessage = this.currentChat.messages[messageIndex - 1];
            if (userMessage && userMessage.type === 'user') {
                this.currentChat.messages.splice(messageIndex, 1);
                this.renderChat();
                this.sendMessageFromHistory(userMessage.content);
            }
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    sendMessageFromHistory(content) {
        this.userInput.value = content;
        this.sendMessage();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞
    showTypingIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'message message-ai typing-indicator';
        indicator.id = 'typingIndicator';
        indicator.innerHTML = `
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
            <span>KHAI –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
        `;
        this.messagesContainer.appendChild(indicator);
        this.scrollToBottom();
    }

    // –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞
    hideTypingIndicator() {
        const indicator = document.getElementById('typingIndicator');
        if (indicator) {
            indicator.remove();
        }
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    scrollToBottom() {
        setTimeout(() => {
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }, 100);
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö
    scrollToTop() {
        this.messagesContainer.scrollTop = 0;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    handleScroll() {
        this.updateScrollProgress();
        this.updateNavigationControls();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    updateScrollProgress() {
        const scrollProgress = document.querySelector('.scroll-progress-bar');
        if (scrollProgress) {
            const scrollTop = this.messagesContainer.scrollTop;
            const scrollHeight = this.messagesContainer.scrollHeight - this.messagesContainer.clientHeight;
            const progress = (scrollTop / scrollHeight) * 100;
            scrollProgress.style.width = `${progress}%`;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    updateNavigationControls() {
        const scrollTop = this.messagesContainer.scrollTop;
        const scrollHeight = this.messagesContainer.scrollHeight - this.messagesContainer.clientHeight;
        const navigationControls = document.querySelector('.navigation-controls');

        if (navigationControls) {
            const isAtBottom = scrollTop >= scrollHeight - 100;
            const isAtTop = scrollTop <= 100;

            navigationControls.classList.toggle('hidden', isAtBottom && isAtTop);
            
            this.scrollToBottomBtn.style.display = isAtBottom ? 'none' : 'flex';
            this.scrollToTopBtn.style.display = isAtTop ? 'none' : 'flex';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    handleSearch() {
        const query = this.searchInput.value.toLowerCase();
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        console.log('Searching for:', query);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —á–∞—Ç–∞–º
    handleChatSearch() {
        const query = this.chatSearchInput.value.toLowerCase();
        this.renderChatList(query);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    renderChatList(searchQuery = '') {
        const chatList = document.querySelector('.chat-list');
        if (!chatList) return;

        const filteredChats = searchQuery ? 
            this.chats.filter(chat => chat.title.toLowerCase().includes(searchQuery)) :
            this.chats;

        chatList.innerHTML = filteredChats.map(chat => `
            <div class="chat-item ${chat.id === this.currentChat.id ? 'active' : ''}" 
                 onclick="app.selectChat(${chat.id})">
                <div class="chat-title">${chat.title}</div>
                <div class="chat-actions">
                    <button class="chat-action-btn" onclick="app.renameChat(${chat.id}, event)">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="chat-action-btn delete" onclick="app.deleteChat(${chat.id}, event)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `).join('');
    }

    // –í—ã–±–æ—Ä —á–∞—Ç–∞
    selectChat(chatId) {
        this.currentChat = this.chats.find(chat => chat.id === chatId);
        this.saveToStorage('currentChatId', chatId);
        this.renderChat();
        this.renderChatList();
        this.toggleSidebar();
        this.playSound('click');
    }

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    renameChat(chatId, event) {
        event.stopPropagation();
        const chat = this.chats.find(c => c.id === chatId);
        const newTitle = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:', chat.title);
        
        if (newTitle && newTitle.trim()) {
            chat.title = newTitle.trim();
            chat.updatedAt = new Date().toISOString();
            this.saveChats();
            this.renderChatList();
            this.playSound('click');
            this.showNotification('–ß–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω', 'success');
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
    deleteChat(chatId, event) {
        event.stopPropagation();
        
        if (this.chats.length <= 1) {
            this.showNotification('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç', 'warning');
            return;
        }

        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?')) {
            this.chats = this.chats.filter(chat => chat.id !== chatId);
            
            if (this.currentChat.id === chatId) {
                this.currentChat = this.chats[0];
                this.saveToStorage('currentChatId', this.currentChat.id);
            }
            
            this.saveChats();
            this.renderChat();
            this.renderChatList();
            this.playSound('click');
            this.showNotification('–ß–∞—Ç —É–¥–∞–ª–µ–Ω', 'success');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
    updateChatInfo() {
        const chatInfo = document.querySelector('.current-chat-info');
        if (chatInfo) {
            chatInfo.innerHTML = `
                <i class="fas fa-comment"></i>
                <span>${this.currentChat.title}</span>
            `;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤
    saveChats() {
        try {
            localStorage.setItem('khai_chats', JSON.stringify(this.chats));
        } catch (error) {
            console.error('Error saving chats:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    saveToStorage(key, value) {
        try {
            localStorage.setItem(`khai_${key}`, JSON.stringify(value));
        } catch (error) {
            console.error('Error saving to storage:', error);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    loadFromStorage(key, defaultValue) {
        try {
            const item = localStorage.getItem(`khai_${key}`);
            return item ? JSON.parse(item) : defaultValue;
        } catch (error) {
            console.error('Error loading from storage:', error);
            return defaultValue;
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        this.applyTheme(newTheme);
        this.saveToStorage('theme', newTheme);
        this.playSound('click');
        
        this.showNotification(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newTheme === 'light' ? '—Å–≤–µ—Ç–ª—É—é' : '—Ç–µ–º–Ω—É—é'}`, 'info');
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
    applyTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
        this.themeToggle.innerHTML = theme === 'light' ? 
            '<i class="fas fa-moon"></i>' : 
            '<i class="fas fa-sun"></i>';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
    getStoredTheme() {
        return this.loadFromStorage('theme', 'dark');
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞
    toggleSidebar() {
        document.querySelector('.sidebar-menu').classList.toggle('active');
        this.playSound('click');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
    handleDocumentClick(event) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        const sidebar = document.querySelector('.sidebar-menu');
        const menuToggle = document.getElementById('menuToggle');
        
        if (sidebar && menuToggle && 
            !sidebar.contains(event.target) && 
            !menuToggle.contains(event.target) &&
            sidebar.classList.contains('active')) {
            this.toggleSidebar();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    handleResize() {
        this.updateCompactMode();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    updateCompactMode() {
        const width = window.innerWidth;
        const isCompact = width < 768;
        
        if (isCompact !== this.isCompactMode) {
            this.isCompactMode = isCompact;
            document.body.classList.toggle('compact-mode', isCompact);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            document.querySelectorAll('.app-header, .input-section, .app-footer').forEach(el => {
                el.classList.toggle('compact', isCompact);
            });
            
            document.querySelector('.messages-container').classList.toggle('expanded', isCompact);
            document.querySelector('.chat-main').classList.toggle('expanded', isCompact);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info') {
        const container = document.querySelector('.notifications-container');
        if (!container) return;

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const existingNotification = container.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-content">${message}</div>
            <button class="notification-close" onclick="this.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        `;

        container.appendChild(notification);
        this.playSound('notification');

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        this.updateModelButton();
        this.updateModeUI();
        this.updateLanguageUI();
        this.updateSoundToggle();
        this.updateCompactMode();
        this.updateNavigationControls();
        this.updateInputControls();
        this.renderChatList();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.app = new KHAIChat();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('Global error:', event.error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
});
