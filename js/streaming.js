// –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
class AIStreaming {
    constructor(messagesContainer) {
        this.messagesContainer = messagesContainer;
        this.currentStream = null;
        this.streamingSpeed = 50; // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
        this.chunkSize = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω —à–∞–≥
    }

    // –°—Ç—Ä–∏–º–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    async streamTextResponse(prompt) {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç—Ä–∏–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this.currentStream) {
            this.currentStream.cancel?.();
        }

        const aiMessageElement = document.createElement('div');
        aiMessageElement.classList.add('message', 'ai-message', 'ai-streaming');
        
        const contentElement = document.createElement('div');
        contentElement.classList.add('message-content');
        aiMessageElement.appendChild(contentElement);
        
        this.messagesContainer.appendChild(aiMessageElement);
        scrollToBottom(this.messagesContainer);

        try {
            const response = await puter.ai.chat(prompt, { 
                model: "gpt-5-nano", 
                stream: true 
            });
            
            this.currentStream = response;
            let fullText = '';
            let buffer = '';
            let isFirstChunk = true;
            
            for await (const part of response) {
                if (part?.text) {
                    buffer += part.text;
                    fullText += part.text;
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                    if (buffer.length >= this.chunkSize || part.text.includes('\n')) {
                        await this.typeText(contentElement, buffer, isFirstChunk);
                        buffer = '';
                        isFirstChunk = false;
                    }
                }
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±—É—Ñ–µ—Ä
            if (buffer.length > 0) {
                await this.typeText(contentElement, buffer, isFirstChunk);
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å Markdown
            this.finalizeMessage(contentElement, fullText);
            aiMessageElement.classList.remove('ai-streaming');
            this.currentStream = null;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞:', error);
            aiMessageElement.remove();
            this.currentStream = null;
            
            throw error;
        }
        
        return aiMessageElement;
    }

    // –ü–ª–∞–≤–Ω–∞—è –ø–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞
    async typeText(element, text, isFirstChunk = false) {
        return new Promise(resolve => {
            let i = 0;
            const currentContent = element.innerHTML;
            
            const type = () => {
                if (i < text.length) {
                    const chunk = text.substring(i, i + 1);
                    element.innerHTML = currentContent + sanitizeHTML(text.substring(0, i + 1)) + '<span class="typing-cursor"></span>';
                    i++;
                    
                    // –†–∞–∑–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    let delay = this.streamingSpeed;
                    if (chunk === '.' || chunk === '!' || chunk === '?') {
                        delay = this.streamingSpeed * 3;
                    } else if (chunk === ',' || chunk === ';') {
                        delay = this.streamingSpeed * 2;
                    } else if (chunk === ' ' || chunk === '\n') {
                        delay = this.streamingSpeed / 2;
                    }
                    
                    setTimeout(type, delay);
                } else {
                    resolve();
                }
            };
            
            type();
        });
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Markdown
    finalizeMessage(element, text) {
        element.innerHTML = marked.parse(text);
        this.applyCodeHighlighting(element);
        saveChatHistory(this.messagesContainer);
        scrollToBottom(this.messagesContainer);
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    applyCodeHighlighting(element) {
        element.querySelectorAll('pre code').forEach((block) => {
            const pre = block.closest('pre');
            const language = block.className.replace('language-', '') || 'text';
            
            const codeHeader = document.createElement('div');
            codeHeader.className = 'code-header';
            
            const languageSpan = document.createElement('span');
            languageSpan.className = 'code-language';
            languageSpan.textContent = language;
            
            const copyButton = document.createElement('button');
            copyButton.className = 'copy-button';
            copyButton.innerHTML = 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
            
            copyButton.addEventListener('click', () => {
                const codeText = block.textContent;
                navigator.clipboard.writeText(codeText).then(() => {
                    copyButton.innerHTML = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                    copyButton.classList.add('copied');
                    setTimeout(() => {
                        copyButton.innerHTML = 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
                        copyButton.classList.remove('copied');
                    }, 2000);
                });
            });
            
            codeHeader.appendChild(languageSpan);
            codeHeader.appendChild(copyButton);
            
            pre.insertBefore(codeHeader, block);
            hljs.highlightElement(block);
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async generateImage(prompt) {
        try {
            const loadingElement = document.createElement('div');
            loadingElement.classList.add('message', 'ai-message');
            loadingElement.innerHTML = '<span class="image-loading"></span>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...';
            this.messagesContainer.appendChild(loadingElement);
            scrollToBottom(this.messagesContainer);
            
            const image = await withRetry(() => 
                puter.ai.txt2img(prompt, { testMode: true })
            );
            
            loadingElement.remove();
            this.addImageMessage(prompt, image);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            
            document.querySelectorAll('.image-loading').forEach(el => {
                const message = el.closest('.message');
                if (message) message.remove();
            });
            
            addMessage(this.messagesContainer, 
                '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 
                false, true);
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    addImageMessage(promptText, imageElement) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', 'ai-image-message');
        
        const textElement = document.createElement('div');
        textElement.textContent = 'üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:';
        messageElement.appendChild(textElement);
        
        if (imageElement instanceof HTMLElement) {
            imageElement.classList.add('generated-image');
            imageElement.alt = `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${promptText}`;
            imageElement.setAttribute('tabindex', '0');
            imageElement.setAttribute('role', 'button');
            imageElement.setAttribute('aria-label', `–£–≤–µ–ª–∏—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${promptText}`);
            messageElement.appendChild(imageElement);
        } else {
            const img = document.createElement('img');
            img.src = imageElement;
            img.classList.add('generated-image');
            img.alt = `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${promptText}`;
            img.setAttribute('tabindex', '0');
            img.setAttribute('role', 'button');
            img.setAttribute('aria-label', `–£–≤–µ–ª–∏—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${promptText}`);
            messageElement.appendChild(img);
        }
        
        if (promptText) {
            const promptElement = document.createElement('div');
            promptElement.classList.add('image-prompt');
            promptElement.textContent = `–ó–∞–ø—Ä–æ—Å: "${sanitizeHTML(promptText)}"`;
            messageElement.appendChild(promptElement);
        }
        
        this.messagesContainer.appendChild(messageElement);
        scrollToBottom(this.messagesContainer);
        saveChatHistory(this.messagesContainer);
        manageChatStorage(this.messagesContainer);
    }

    // –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
    async analyzeImageWithText(text, imageData) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞
            const analyzingElement = document.createElement('div');
            analyzingElement.classList.add('message', 'ai-message');
            analyzingElement.innerHTML = `
                <div class="ai-status">
                    <i class="ti ti-eye"></i>
                    –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    <div class="typing-indicator">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
            `;
            
            this.messagesContainer.appendChild(analyzingElement);
            scrollToBottom(this.messagesContainer);
            
            // –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∞–Ω–∞–ª–∏–∑–∞
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞
            analyzingElement.remove();
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const prompt = text ? 
                `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: "${text}"` : 
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ";
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            await this.streamTextResponse(prompt + ". (–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!)");
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            addMessage(this.messagesContainer, 
                '‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 
                false, true);
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—Ä–∏–º–∞
    cancelStream() {
        if (this.currentStream) {
            this.currentStream.cancel?.();
            this.currentStream = null;
        }
    }
}
